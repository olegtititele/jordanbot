using PostgreSQL;
using Bot_Keyboards;
using ConfigFile;
using ProjectFunctions;

using Telegram.Bot;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.InputFiles;


namespace States
{
    public static class CountryLinkState
    {
        public static async void MessageHandler(ITelegramBotClient botClient, dynamic messageText, long chatId, int messageId)
        {
            try
            {
                string oldLink = DB.GetLink(chatId);

                if(Functions.StringIsNumber(messageText))
                {
                    using (var fileStream = new FileStream(Config.menuPhoto, FileMode.Open, FileAccess.Read, FileShare.Read))
                    {
                        await botClient.SendPhotoAsync(
                            chatId: chatId,
                            photo: new InputOnlineFile(fileStream),
                            caption: "<b>‚ùóÔ∏è –°—Å—ã–ª–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ.</b>",
                            parseMode: ParseMode.Html,
                            replyMarkup: Keyboards.BackToCountries
                        );
                    } 
                }
                else
                {
                    try
                    {
                        DB.UpdateLink(chatId, messageText!);

                        using (var fileStream = new FileStream(Config.warningPhoto, FileMode.Open, FileAccess.Read, FileShare.Read))
                        {
                            string platform = DB.GetPlatform(chatId);
                            string link = DB.GetLink(chatId);
                            int announCount = DB.GetAnnounCount(chatId);
                            string sellerTotalAds = DB.GetSellerAdvCount(chatId);
                            string sellerRegDate = DB.GetSellerRegData(chatId);
                            string adRegDate = DB.GetAdvRegData(chatId);
                            decimal sellerRating = DB.GetSellerRating(chatId);
                            string sellerType = DB.GetSellerType(chatId);
                            int startPage = DB.GetStartPage(chatId);
                            string localBlacklist = DB.GetLocalAndGlobalBl(chatId)[0];
                            string globalBlacklist = DB.GetLocalAndGlobalBl(chatId)[1];

                            DateTime dt;
                            if(DateTime.TryParse(adRegDate, out dt))
                            {
                                adRegDate = dt.ToString("dd.MM.yyyy");
                            }

                            if(DateTime.TryParse(sellerRegDate, out dt))
                            {
                                sellerRegDate = dt.ToString("dd.MM.yyyy");
                            }

                            await botClient.SendPhotoAsync(
                                chatId: chatId,
                                photo: new InputOnlineFile(fileStream),
                                caption: $"<b><u>–í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞: </u></b>\n\n<b>üõç –ü–ª–æ—â–∞–¥–∫–∞ ‚áí </b>{platform}\n\n<b>üì® –°—Å—ã–ª–∫–∞ ‚áí </b>{link}\n\n<b>üì¶ –ö–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–∞ ‚áí </b>{announCount}\n\n<b>üóÑ –ö–æ–ª-–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π ‚áí </b>{sellerTotalAds}\n\n<b>üìÜ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–∞–≤—Ü–∞ ‚áí </b>{sellerRegDate}\n\n<b>üìÖ –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ‚áí </b>{adRegDate}\n\n<b>‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–∞ ‚áí </b>{sellerRating}\n\n<b>üë§ –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–æ–≤ ‚áí </b>{sellerType}\n\n<b>üîé –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚áí </b>{startPage}\n\n<b>üìÇ –õ–æ–∫–∞–ª—å–Ω—ã–π –ß–° ‚áí </b>{localBlacklist}\n\n<b>üóÇ –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ß–° ‚áí </b>{globalBlacklist}",
                                parseMode: ParseMode.Html,
                                replyMarkup: Keyboards.StartPars
                            );
                        }
                        string state = "Parser";
                        DB.UpdateState(chatId, state);
                    }
                    catch(Exception)
                    {
                        DB.UpdateLink(chatId, oldLink);
                        using (var fileStream = new FileStream(Config.menuPhoto, FileMode.Open, FileAccess.Read, FileShare.Read))
                        {
                            await botClient.SendPhotoAsync(
                                chatId: chatId,
                                photo: new InputOnlineFile(fileStream),
                                caption: "<b>‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.</b>",
                                parseMode: ParseMode.Html,
                                replyMarkup: Keyboards.BackToCountries
                            );
                        }
                    }
                }
            }
            catch
            {
                return;
            }
        }
    }
}