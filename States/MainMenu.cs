using PostgreSQL;
using Bot_Keyboards;
using ConfigFile;
using Modules;

using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;


namespace States
{
    public static class MainMenu
    {
        public static async void CallBack(ITelegramBotClient botClient, CallbackQuery callbackQuery, long chatId, int messageId, string firstName, string mainMenuPhoto)
        {
            string state;

            try
            {
                // –í–´–ë–û–† –°–¢–†–ê–ù–´
                foreach(string country in Config.Countries)
                {
                    
                    if(callbackQuery.Data==country)
                    {
                        if(country=="olx.pt" || country=="olx.pl" || country=="olx.bg" || country=="olx.ro")
                        {
                            if(DB.GetToken(chatId)=="–ù–µ —É–∫–∞–∑–∞–Ω")
                            {
                                await botClient.AnswerCallbackQueryAsync(
                                    callbackQueryId: callbackQuery.Id,
                                    text: "‚ùï –ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞! –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.",
                                    showAlert:false
                                );
                                return;
                            }
                        }
                        state = "CountryLink";
                        DB.UpdateState(chatId, state);
                        DB.UpdatePlatform(chatId, callbackQuery.Data);

                        await botClient.EditMessageCaptionAsync(
                            chatId: chatId,
                            messageId: messageId,
                            caption: CountryLink.GetCountryLink(country),
                            replyMarkup: Keyboards.BackToCountries,
                            parseMode: ParseMode.Html
                        );
                    }
                }
                
                switch(callbackQuery.Data)
                {
                    // ADMIN
                    case "alert":
                        state = "AdminAlert";
                        DB.UpdateState(chatId, state);
                        await botClient.EditMessageTextAsync(
                            chatId: chatId,
                            messageId: messageId,
                            text: $"<b>üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º —Ä–∞—Å—Å—ã–ª–∫–∏:</b>",
                            parseMode: ParseMode.Html,
                            replyMarkup: Keyboards.BackToAdmin
                        );
                        return;

                    case "show_services":
                    // –ü–û–°–ú–û–¢–†–ï–¢–¨ –°–ï–†–í–ò–°–´
                        await botClient.EditMessageCaptionAsync(
                            chatId: chatId,
                            messageId: messageId,
                            caption: "<b>üåç –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—â–∞–¥–∫—É, –≥–¥–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.</b>",
                            parseMode: ParseMode.Html,
                            replyMarkup: CountriesKeyboards.CountriesSitesKb
                        );
                        return;
                    case "settings":
                    // –ù–ê–°–¢–†–û–ô–ö–ò
                        await botClient.EditMessageCaptionAsync(
                            chatId: chatId,
                            messageId: messageId,
                            caption: GenerateMessageText.SettingsText(chatId),
                            parseMode: ParseMode.Html,
                            replyMarkup: Keyboards.SettingsKb
                        );
                        return;
                    case "configuration":
                    // –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
                        await botClient.EditMessageCaptionAsync(
                            chatId: chatId,
                            messageId: messageId,
                            caption: GenerateMessageText.ConfigurationText(chatId),
                            parseMode: ParseMode.Html,
                            replyMarkup: Keyboards.ConfigurationKb(chatId)
                        );
                        return;
                    case "olx":
                    // OLX
                        await botClient.EditMessageReplyMarkupAsync(
                            chatId: chatId,
                            messageId: messageId,
                            replyMarkup: CountriesKeyboards.OLXKb
                        );
                        return;
                    case "opensooq":
                    // opensooq
                        await botClient.EditMessageReplyMarkupAsync(
                            chatId: chatId,
                            messageId: messageId,
                            replyMarkup: CountriesKeyboards.OPENSOOQKb
                        );
                        return;
                    case "account_type":
                    // –í–´–ë–û–† –¢–ò–ü–ê –ê–ö–ö–ê–£–ù–¢–ê
                        if(DB.ShowAccType(chatId) == "–ß–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ")
                        {
                            DB.UpdateAccType(chatId);
                            await botClient.EditMessageReplyMarkupAsync(
                                chatId: chatId,
                                messageId: messageId,
                                replyMarkup: Keyboards.ConfigurationKb(chatId)
                            );
                        }
                        else
                        {
                            DB.UpdateAccType(chatId);
                            await botClient.EditMessageReplyMarkupAsync(
                                chatId: chatId,
                                messageId: messageId,
                                replyMarkup: Keyboards.ConfigurationKb(chatId)
                            );
                        }
                        return;
                    case "quantity_of_goods":
                    // –ö–û–õ-–í–û –¢–û–í–ê–†–ê
                        state = "AdvCount";
                        DB.UpdateState(chatId, state);
                        await botClient.EditMessageCaptionAsync(
                            chatId: chatId,
                            messageId: messageId,
                            caption: "<b>üìï –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞.\n\n‚úîÔ∏è –ü—Ä–∏–º–µ—Ä: </b><u>100</u>",
                            parseMode: ParseMode.Html,
                            replyMarkup: Keyboards.BackToConfiguration
                        );
                        return;
                    case "seller_announ_count":
                    // –ö–û–õ-–í–û –û–ë–™–Ø–í–õ–ï–ù–ò–ô –ü–†–û–î–ê–í–¶–ê
                        state = "SellerAdvCount";
                        DB.UpdateState(chatId, state);
                        await botClient.EditMessageCaptionAsync(
                            chatId: chatId,
                            messageId: messageId,
                            caption: "<b>üìô –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø—Ä–æ–¥–∞–≤—Ü–∞.\n\n‚úîÔ∏è –ü—Ä–∏–º–µ—Ä: </b><u>10</u> (–ø–∞—Ä—Å–µ—Ä –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ —É –∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–ª-–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ –±—É–¥–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 10)",
                            parseMode: ParseMode.Html,
                            replyMarkup: Keyboards.sellerTotalAdsKb
                        );
                        return;
                    case "seller_rating":
                    // –†–ï–ô–¢–ò–ù–ì –ü–†–û–î–ê–í–¶–ê
                        state = "SellerRating";
                        DB.UpdateState(chatId, state);
                        await botClient.EditMessageCaptionAsync(
                            chatId: chatId,
                            messageId: messageId,
                            caption: "<b>üìù –í–≤–µ–¥–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–∞(O—Ç 0 –¥–æ 5).\n\n‚úîÔ∏è –ü—Ä–∏–º–µ—Ä: </b><u>2,5</u> (–ø–∞—Ä—Å–µ—Ä –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ —É –∫–æ—Ç–æ—Ä—ã—Ö —Ä–µ–π—Ç–∏–Ω–≥ –Ω–µ –±—É–¥–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 2.5)",
                            parseMode: ParseMode.Html,
                            replyMarkup: Keyboards.sellerRatingKb
                        );
                        return;
                    case "seller_reg":
                    // –î–ê–¢–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –ü–†–û–î–ê–í–¶–ê
                        state = "SellerRegData";
                        DB.UpdateState(chatId, state);
                        await botClient.EditMessageCaptionAsync(
                            chatId: chatId,
                            messageId: messageId,
                            caption: "<b>üìó –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞.\n\n‚úîÔ∏è –ü—Ä–∏–º–µ—Ä: </b><u>01.01.2022</u> (–ø–∞—Ä—Å–µ—Ä –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å —Å 01.01.2022 –ø–æ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É)",
                            parseMode: ParseMode.Html,
                            replyMarkup: Keyboards.RegDateKb()
                        );
                        return;
                    case "adv_reg":
                    // –î–ê–¢–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –û–ë–™–Ø–í–õ–ï–ù–ò–Ø
                        state = "AdvRegData";
                        DB.UpdateState(chatId, state);
                        await botClient.EditMessageCaptionAsync(
                            chatId: chatId,
                            messageId: messageId,
                            caption: "<b>üìò –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è.\n\n‚úîÔ∏è –ü—Ä–∏–º–µ—Ä: </b><u>01.01.2022</u> (–ø–∞—Ä—Å–µ—Ä –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã —Å 01.01.2022 –ø–æ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É)",
                            parseMode: ParseMode.Html,
                            replyMarkup: Keyboards.RegDateKb()
                        );
                        return;
                    case "whatsapp_text":
                    // –¢–ï–ö–°–¢ –î–õ–Ø WHATSAPP
                        string text = "<b>üñä –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è WhatsApp (<u>–º–∞–∫—Å. 500 —Å–∏–º–≤–æ–ª–æ–≤</u>):</b>\n\n<b>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏:</b>\n<code>@adlink</code>-<i>–ü–æ–¥—Å—Ç–∞–≤–∏—Ç —Ç–µ–∫—É—â—É—é —Å—Å—ã–ª–∫—É</i>\n<code>@adname</code>-<i>–ü–æ–¥—Å—Ç–∞–≤–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è</i>\n<code>@adprice</code>-<i>–ü–æ–¥—Å—Ç–∞–≤–∏—Ç —Ü–µ–Ω—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è</i>\n<code>@adlocation</code>-<i>–ü–æ–¥—Å—Ç–∞–≤–∏—Ç –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è</i>\n<code>@sellername</code>-<i>–ü–æ–¥—Å—Ç–∞–≤–∏—Ç –∏–º—è –ø—Ä–æ–¥–∞–≤—Ü–∞</i>\n\n‚úîÔ∏è <b>–í—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –≤ —Ç–µ–∫—Å—Ç –∏ –≤–º–µ—Å—Ç–æ –Ω–µ–≥–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—Å—è –Ω—É–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.</b>";
                        state = "WhatsappText";
                        DB.UpdateState(chatId, state);
                        await botClient.EditMessageCaptionAsync(
                            chatId: chatId,
                            messageId: messageId,
                            caption: text,
                            parseMode: ParseMode.Html,
                            replyMarkup: Keyboards.BackToSettings
                        );
                        return;
                    case "starter_page":
                    // –°–¢–ê–†–¢–û–í–ê–Ø –°–¢–†–ê–ù–ò–¶–ê
                        state = "StartPage";
                        DB.UpdateState(chatId, state);
                        await botClient.EditMessageCaptionAsync(
                            chatId: chatId,
                            messageId: messageId,
                            caption: "<b>üñä –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É:</b>",
                            parseMode: ParseMode.Html,
                            replyMarkup: Keyboards.BackToSettings
                        );
                        return;
                    case "black_list":
                    // –ß–ï–†–ù–´–ô –°–ü–ò–°–û–ö
                        await botClient.EditMessageCaptionAsync(
                            chatId: chatId,
                            messageId: messageId,
                            caption: $"üìé <b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ñ–∏–ª—å—Ç—Ä —á—Ç–æ–±—ã –ø–æ–º–µ–Ω—è—Ç—å –µ–≥–æ.</b>\n\n<b>–ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ <u>–õ–∏—á–Ω–æ–≥–æ –ß—ë—Ä–Ω–æ–≥–æ –°–ø–∏—Å–∫–∞</u> –Ω–µ –±—É–¥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —É–∂–µ –≤–∏–¥–µ–ª–∏.\n\n–ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ <u>–û–±—â–µ–≥–æ –ß—ë—Ä–Ω–æ–≥–æ –°–ø–∏—Å–∫–∞</u> –Ω–µ –±—É–¥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü–æ–≤, –∫–æ—Ç–æ—Ä—ãx –≤–∏–¥–µ–ª–∏ –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.\n\nüó≥ –ü—Ä–æ–¥–∞–≤—Ü–æ–≤ –≤ ¬´–õ–∏—á–Ω–æ–º –ß–°¬ª ‚Äî {DB.LocalBlacklistLength(chatId)}\nüåê –ü—Ä–æ–¥–∞–≤—Ü–æ–≤ –≤ ¬´–û–±—â–µ–º –ß–°¬ª ‚Äî {DB.GlobalBlacklistLength() + 8324}</b>",
                            parseMode: ParseMode.Html,
                            replyMarkup: Keyboards.BlackListKb(chatId)
                        );
                        return;
                    case "local_bl":
                        string blackList;
                        if(DB.GetLocalAndGlobalBl(chatId)[0]=="–í–∫–ª—é—á–∏—Ç—å")
                        {
                            blackList = "–û—Ç–∫–ª—é—á–∏—Ç—å";
                            DB.UpdateLocalBlackList(chatId, blackList);
                        }
                        else
                        {
                            blackList = "–í–∫–ª—é—á–∏—Ç—å";
                            DB.UpdateLocalBlackList(chatId, blackList);
                        }
                        await botClient.EditMessageReplyMarkupAsync(
                            chatId: chatId,
                            messageId: messageId,
                            replyMarkup: Keyboards.BlackListKb(chatId)
                        );
                        return;
                    case "global_bl":
                        if(DB.GetLocalAndGlobalBl(chatId)[1]=="–í–∫–ª—é—á–∏—Ç—å")
                        {
                            blackList = "–û—Ç–∫–ª—é—á–∏—Ç—å";
                            DB.UpdateGlobalBlackList(chatId, blackList);
                        }
                        else
                        {
                            blackList = "–í–∫–ª—é—á–∏—Ç—å";
                            DB.UpdateGlobalBlackList(chatId, blackList);
                        }
                        await botClient.EditMessageReplyMarkupAsync(
                            chatId: chatId,
                            messageId: messageId,
                            replyMarkup: Keyboards.BlackListKb(chatId)
                        );
                        return;
                    case "token":
                    // –¢–û–ö–ï–ù
                        state = "Token";
                        DB.UpdateState(chatId, state);
                        await botClient.EditMessageCaptionAsync(
                            chatId: chatId,
                            messageId: messageId,
                            caption: "<b>üñä –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (–±–µ–∑ Bearer):</b>",
                            parseMode: ParseMode.Html,
                            replyMarkup: Keyboards.BackToSettings
                        );
                        return;
                    case "back_from_pars":
                        using (var fileStream = new FileStream(Config.menuPhoto, FileMode.Open, FileAccess.Read, FileShare.Read))
                        {
                            await botClient.EditMessageMediaAsync(
                                chatId: chatId,
                                messageId: messageId,
                                media: new InputMediaPhoto(new InputMedia(fileStream, Config.menuPhoto))
                            );
                        }
                
                        await botClient.EditMessageCaptionAsync(
                            chatId: chatId,
                            messageId: messageId,
                            caption: GenerateMessageText.MenuText(chatId),
                            parseMode: ParseMode.Html,
                            replyMarkup: Keyboards.MainMenuButtons
                        );
                        return;
                }
            }
            catch
            {
                await botClient.AnswerCallbackQueryAsync(
                    callbackQueryId: callbackQuery.Id,
                    text: Config.errorMessage,
                    showAlert:false
                );
            }
        }

        // –û—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
        private static string leave_only_numbers(string block)
        {
            string new_block = "";
            for (int i = 0; i < block.Length; i++)
            {
                if (Char.IsDigit(block[i]))
                {
                    new_block += block[i];
                }
                else
                {
                    continue;
                }
            }
            return new_block;
        }
    }
}