using Telegram.Bot.Types.ReplyMarkups;
using PostgreSQL;
using ConfigFile;

namespace Bot_Keyboards
{
    public static class Keyboards
    {

        // MENU
        public static InlineKeyboardMarkup MainMenuButtons = new(new []
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "üîå –ü–∞—Ä—Å–∏–Ω–≥", callbackData: "show_services"),
            },
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callbackData: "settings"),
                InlineKeyboardButton.WithCallbackData(text: "üõ† –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", callbackData: "configuration"),
            },
        });

        public static InlineKeyboardMarkup AdminKeyboard = new(new []
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "üì© –†–∞—Å—Å—ã–ª–∫–∞", callbackData: "alert"),
                InlineKeyboardButton.WithCallbackData(text: "–¢–æ–∫–µ–Ω—ã OLX", callbackData: "olx_tokens"),
            },
        });

        
        public static ReplyKeyboardMarkup MenuKb(long chatId)
        {
            ReplyKeyboardMarkup Keyboard;
            if(Config.adminChatsId.Contains(chatId))
            {
                Keyboard = new(new []
                {
                    new KeyboardButton[] {"–ú–µ–Ω—é", "–ê–¥–º–∏–Ω"},
                })
                {
                    ResizeKeyboard = true,
                };
            }
            else
            {
                Keyboard = new(new []
                {
                    new KeyboardButton[] {"–ú–µ–Ω—é"},
                })
                {
                    ResizeKeyboard = true,
                };
            }
            return Keyboard;
        }

        // SETTINGS

        public static InlineKeyboardMarkup SettingsKb = new(new []
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫", callbackData: "black_list"),
            },
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "–¢–µ–∫—Å—Ç –¥–ª—è WhatsApp", callbackData: "whatsapp_text"),  
            },
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callbackData: "starter_page"),
            },
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "–¢–æ–∫–µ–Ω OLX", callbackData: "token"),
            },
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "üèö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callbackData: "back_to_menu"),
            },
        });

        public static InlineKeyboardMarkup ConfigurationKb(long chatId)
        {
            string sellerType = DB.GetSellerType(chatId);
            InlineKeyboardMarkup configurationKb;
            if(sellerType == "–ß–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ")
            {
                configurationKb = new(new []
                {
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: "–ü–∞—Ä—Å–∏—Ç—å: —Ç–æ–ª—å–∫–æ \"–ß–∞—Å—Ç–Ω—ã–µ –ª–∏—Ü–∞\"", callbackData: "account_type"),
                    },
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: "–ö–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–∞", callbackData: "quantity_of_goods"),
                    },
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: "–ö–æ–ª-–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø—Ä–æ–¥–∞–≤—Ü–∞", callbackData: "seller_announ_count"),
                    },
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: "–†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–∞", callbackData: "seller_rating"),
                    },
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞", callbackData: "seller_reg"),
                    },
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", callbackData: "adv_reg"),
                    },
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: "üèö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callbackData: "back_to_menu"),
                    },
                });
            }
            else
            {
                configurationKb = new(new []
                {
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: "–ü–∞—Ä—Å–∏—Ç—å: \"–í—Å–µ —Ç–∏–ø—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤\"", callbackData: "account_type"),
                    },
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: "–ö–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–∞", callbackData: "quantity_of_goods"),
                    },
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: "–ö–æ–ª-–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø—Ä–æ–¥–∞–≤—Ü–∞", callbackData: "seller_announ_count"),
                    },
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: "–†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–∞", callbackData: "seller_rating"),
                    },
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞", callbackData: "seller_reg"),
                    },
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", callbackData: "adv_reg"),
                    },
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: "üèö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callbackData: "back_to_menu"),
                    },
                });
            }

            return configurationKb;
        }

        public static InlineKeyboardMarkup RegDateKb()
        {
            DateTime today = DateTime.Today;
            InlineKeyboardMarkup regDateKb;

            regDateKb = new(new []
            {
                new []
                {
                    InlineKeyboardButton.WithCallbackData(text: $"–°–µ–≥–æ–¥–Ω—è - {today.ToString("dd.MM.yyyy")}", callbackData: "today_date"),
                },
                new []
                {
                    InlineKeyboardButton.WithCallbackData(text: $"–û—Ç–∫–ª—é—á–∏—Ç—å", callbackData: "disable_reg_date"),
                },
                new []
                {
                    InlineKeyboardButton.WithCallbackData(text: "üîô –ù–∞–∑–∞–¥", callbackData: "back_to_configuration"),
                }
            });

            return regDateKb;
        }

        public static InlineKeyboardMarkup sellerTotalAdsKb = new(new []
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: $"–û—Ç–∫–ª—é—á–∏—Ç—å", callbackData: "disable_seller_total_ads"),
            },
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "üîô –ù–∞–∑–∞–¥", callbackData: "back_to_configuration"),
            }
        });

        public static InlineKeyboardMarkup sellerRatingKb = new(new []
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: $"0", callbackData: "0"),
                InlineKeyboardButton.WithCallbackData(text: $"1", callbackData: "1"),
                InlineKeyboardButton.WithCallbackData(text: $"2", callbackData: "2"),
                InlineKeyboardButton.WithCallbackData(text: $"3", callbackData: "3"),
                InlineKeyboardButton.WithCallbackData(text: $"4", callbackData: "4"),
                InlineKeyboardButton.WithCallbackData(text: $"5", callbackData: "5"),
            },
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "üîô –ù–∞–∑–∞–¥", callbackData: "back_to_configuration"),
            }
        });


        public static InlineKeyboardMarkup BlackListKb(long chatId)
        {
            string localBlacklist = DB.GetLocalAndGlobalBl(chatId)[0];
            string globalBlackList = DB.GetLocalAndGlobalBl(chatId)[1];
            InlineKeyboardMarkup blackList;

            if(localBlacklist == "–í–∫–ª—é—á–∏—Ç—å" && globalBlackList == "–í–∫–ª—é—á–∏—Ç—å")
            {

                blackList = new(new []
                {
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: "üü¢ –õ–∏—á–Ω—ã–π –ß–°", callbackData: "local_bl"),
                        InlineKeyboardButton.WithCallbackData(text: "üü¢ –û–±—â–∏–π –ß–°", callbackData: "global_bl"),
                    },
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: "üîô –ù–∞–∑–∞–¥", callbackData: "back_to_settings"),
                    }
                });
            }
            else if(localBlacklist == "–û—Ç–∫–ª—é—á–∏—Ç—å" && globalBlackList == "–û—Ç–∫–ª—é—á–∏—Ç—å")
            {
                blackList = new(new []
                {
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: "‚ö™Ô∏è –õ–∏—á–Ω—ã–π –ß–°", callbackData: "local_bl"),
                        InlineKeyboardButton.WithCallbackData(text: "‚ö™Ô∏è –û–±—â–∏–π –ß–°", callbackData: "global_bl"),
                    },
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: "üîô –ù–∞–∑–∞–¥", callbackData: "back_to_settings"),
                    }
                });
            }
            else if(localBlacklist == "–í–∫–ª—é—á–∏—Ç—å" && globalBlackList == "–û—Ç–∫–ª—é—á–∏—Ç—å")
            {
                blackList = new(new []
                {
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: "üü¢ –õ–∏—á–Ω—ã–π –ß–°", callbackData: "local_bl"),
                        InlineKeyboardButton.WithCallbackData(text: "‚ö™Ô∏è –û–±—â–∏–π –ß–°", callbackData: "global_bl"),
                    },
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: "üîô –ù–∞–∑–∞–¥", callbackData: "back_to_settings"),
                    }
                });
            }
            else
            {
                blackList = new(new []
                {
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: "‚ö™Ô∏è –õ–∏—á–Ω—ã–π –ß–°", callbackData: "local_bl"),
                        InlineKeyboardButton.WithCallbackData(text: "üü¢ –û–±—â–∏–π –ß–°", callbackData: "global_bl"),
                    },
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: "üîô –ù–∞–∑–∞–¥", callbackData: "back_to_settings"),
                    }
                });
            }

            return blackList;
        }

        // PARSER
        public static InlineKeyboardMarkup StartPars = new(new []
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "üè† –í –º–µ–Ω—é", callbackData: "back_from_pars"),
                InlineKeyboardButton.WithCallbackData(text: "ü™ê –ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥", callbackData: "start_pars"),
            }
        });

        public static InlineKeyboardMarkup StopPars = new(new []
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥", callbackData: "stop_parser"),
            }
        });


        // BACK KEYBOARDS
        public static InlineKeyboardMarkup BackBtnKb = new(new []
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "üèö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callbackData: "back_to_menu"),
            },
        });
        public static InlineKeyboardMarkup BackToProfile = new(new []
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "üèö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callbackData: "back_to_profile"),
            },
        });

        public static InlineKeyboardMarkup BackFromParse = new(new []
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "üèö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callbackData: "back_from_pars"),
            },
        });

        public static InlineKeyboardMarkup HideMessage = new(new []
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "‚ö†Ô∏è –°–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callbackData: "hide_message"),
            },
        });
        public static InlineKeyboardMarkup BackToSettings= new(new []
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "üîô –ù–∞–∑–∞–¥", callbackData: "back_to_settings"),
            },
        });
        public static InlineKeyboardMarkup BackToConfiguration= new(new []
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "üîô –ù–∞–∑–∞–¥", callbackData: "back_to_configuration"),
            },
        });

        public static InlineKeyboardMarkup BackToCountries = new(new []
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "üîô –ù–∞–∑–∞–¥", callbackData: "back_to_countries"),
            },
        });

        public static InlineKeyboardMarkup BackToAdmin = new(new []
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "üîô –ù–∞–∑–∞–¥", callbackData: "back_to_admin"),
            },
        });
    }
}